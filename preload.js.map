{"version":3,"sources":["src/preload.js"],"names":["E","require","ApplicationState","contextBridge","ipcRenderer","logger","on","APP_STARTUP","info","onApplicationStart","then","mode","send","UI_READY"],"mappings":";;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,UAAD,CAAjB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,YAAD,CAAhC;;AACA,MAAM;AAAEE,EAAAA,aAAF;AAAgBC,EAAAA;AAAhB,IAAgCH,OAAO,CAAC,UAAD,CAA7C;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,cAAD,CAAtB,C,CACA;;;AACAG,WAAW,CAACE,EAAZ,CAAeN,CAAC,CAACO,WAAjB,EAA6B,YAAY;AACrC;AACAF,EAAAA,MAAM,CAACG,IAAP,CAAY,WAAZ;AACAN,EAAAA,gBAAgB,CAACO,kBAAjB,GAAsCC,IAAtC,CAA2CC,IAAI,IAAI;AAC/C,WAAOP,WAAW,CAACQ,IAAZ,CAAiBZ,CAAC,CAACa,QAAnB,EAA4BF,IAA5B,CAAP;AACH,GAFD;AAIH,CAPD","sourcesContent":["const E = require(\"./events\");\nconst ApplicationState = require(\"./db/index\");\nconst { contextBridge,ipcRenderer } = require(\"electron\");\nconst logger = require(\"electron-log\");\n//contextBridge.exposeInMainWorld(\"darkMode\",{ toggle:ipcRenderer.invoke(E.UI_MODE_TOGGLE) })\nipcRenderer.on(E.APP_STARTUP,async () => {\n    //initialize application state.\n    logger.info(\" startup \");\n    ApplicationState.onApplicationStart().then(mode => { \n        return ipcRenderer.send(E.UI_READY,mode); \n    });\n\n})"],"file":"preload.js"}