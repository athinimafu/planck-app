{"version":3,"sources":["src/main.js"],"names":["BrowserWindow","ipcMain","nativeTheme","dialog","app","Menu","MenuItem","globalShortcut","require","E","path","DirectoryActions","ModelProcess","menu","unhandled","logger","os","console","log","getPath","info","LanProcess","executable_path","WINDOWS","LINUX","MAC","type","replace","append","label","submenu","role","click","saveCurrentFile","ipcSend","mainWindow","SAVE_FILE","quit","PROJECT_TYPE","CURRENT_DIRECTORY","_PROJECTS","index","resolve","__dirname","currentMode","ProcessWindow","process_started","removeAllListeners","currentWindow","channel","data","Promise","undefined","error","webContents","send","AppSetUp","width","height","show","webPreferences","nodeIntegration","nodeIntegrationInSubFrames","nodeIntegrationInWorker","preload","join","contextIsolation","openDevTools","mode","loadFile","on","close","ProcessWindowSetup","indexpath","processData","x","y","PROCESS_STOPPED","RUN_GUI","UI_READY","e","from","createWindow","then","APP_STARTUP","once","_","themeSource","DIR_PRESENT","whenReady","register","process","platform","getAllWindows","length","handle","UI_MODE_TOGGLE","shouldUseDarkColors","present","currentDirectory","basepath","project_type","babel_path","packed","setBaseDir","newNode","OPEN_FILES_PRESENT","openFiles","all","Object","keys","map","file","sourceCode","readFromFile","NEW_FILE","filepath","writeToFile","NEW_FOLDER","createDir","dialogOptions","title","properties","filters","name","extensions","message","defaultPath","showOpenDialog","OPEN_DIR_PROMPT","projectType","canceled","filePaths","transformProject","project_init_complete","deps","getDependencies","PROJECT_DEP","OPEN_FILE","newlyCreated","code","update_file","lang","trim","updateCode","language","project","indexPath","guiStartup","catch","project_data","_dependencies","UPDATE_GUI","STOP_GUI"],"mappings":"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","sourcesContent":["const { BrowserWindow, ipcMain,nativeTheme,dialog,app,Menu,MenuItem,globalShortcut } = require(\"electron\")\nconst E = require(\"./events\");\nconst path = require('path');\nconst DirectoryActions  = require(\"./src/directoryActions\");\nconst ModelProcess = require(\"./src/languages\");\nconst menu = new Menu();\nconst unhandled = require(\"electron-unhandled\");\nconst logger = require(\"electron-log\");\nconst os = require('os');\nconsole.log(\" app data \",app.getPath(\"appData\"));\n\nlogger.info(\" file loaded \");\nlet LanProcess = null;\nlet executable_path = \"\";\nconst WINDOWS = \"Windows_NT\";\nconst LINUX   = \"Linux\";\nconst MAC     = \"Darwin\";\n\nswitch(os.type()) {\n    case WINDOWS:\n        executable_path = app.getPath(\"temp\").replace(/(temp|Temp)/g,'');\n        break;\n    case LINUX:\n        executable_path = \"/opt/planck_app/\"\n        break;\n} \n\ntry {\nmenu.append(\n    new MenuItem({\n        label:'File',\n        submenu:[{\n            role:'fileMenu',\n            click:saveCurrentFile\n        }]\n    })\n)\n\n\nfunction saveCurrentFile() { ipcSend(mainWindow,E.SAVE_FILE); }\n\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\nif (require('electron-squirrel-startup')) { // eslint-disable-line global-require\n  app.quit();\n}\n\nlet PROJECT_TYPE;\nlet CURRENT_DIRECTORY;\n\nconst _PROJECTS = {\n    'html':{ \n        index:path.resolve(__dirname,\"./html-renderer.js/index.html\") \n    },\n    'javascript':{ \n        index:path.resolve(__dirname,\"./js-renderer.js/index.html\") \n    }\n}\n\nlet currentMode = \"\";\nlet mainWindow    = null;\nlet ProcessWindow = null;\nlet process_started = false;\n\n\napp.removeAllListeners('ready')\n\nconst ipcSend = (currentWindow,channel,data) => { \n    return new Promise(resolve => {\n        if (currentWindow == undefined) {\n            console.error(\" main window not yet defined\")\n            resolve(false);\n        }\n        else {\n            currentWindow.webContents.send(channel,data);\n            resolve(true);\n        }\n    })\n}\n\nconst AppSetUp = () => {\n    return new Promise(resolve => {\n        mainWindow = new BrowserWindow({\n            width: 1200,\n            height: 800,\n            show:false,\n            webPreferences:{ \n                nodeIntegration:true, \n                nodeIntegrationInSubFrames:true,\n                nodeIntegrationInWorker:true,\n                preload:path.join(__dirname,\"./preload-bundled.js\"),\n                contextIsolation:false\n            }\n        })\n        //open main window devtools.\n        mainWindow.webContents.openDevTools({ mode:\"detach\" });\n        //load file.\n        mainWindow.loadFile(path.resolve(__dirname,\"./index.html\"));\n        logger.info(\" application set up complete. \"); \n        mainWindow.on(\"close\",() => {\n            if (process_started) ProcessWindow.close();\n        })       \n        resolve();\n\n    })\n}\n\nconst ProcessWindowSetup = ({ indexpath,processData }) => {\n    return new Promise(async resolve => {\n        \n        ProcessWindow = new BrowserWindow({\n            width:600,\n            x:600,\n            y:0,\n            show:false,\n            webPreferences:{\n                nodeIntegration:true,\n                nodeIntegrationInSubFrames:true,\n                nodeIntegrationInWorker:true,\n                contextIsolation:false\n            }\n        })\n        //load file into process window.\n        await ProcessWindow.loadFile(indexpath)\n        \n        ProcessWindow.webContents.openDevTools({ mode:\"detach\" })\n     \n        ProcessWindow.on(\"close\",() => \n        {\n            ipcSend(mainWindow,E.PROCESS_STOPPED);\n        })\n\n        resolve(true); \n        process_started = true;\n        ipcSend(ProcessWindow,E.RUN_GUI,processData);    \n        ipcMain.on(E.UI_READY,(e,from) => {\n            if (from == \"process\") ProcessWindow.show()\n        } )\n    })\n}\n\n/** creatWindow function. */\nconst createWindow = () => {\n    // Create the browser window.\n\n    AppSetUp().then(() => {\n    //ipcSend functionality\n        ipcSend(mainWindow,E.APP_STARTUP,{}).then(() => {\n            logger.info(\" main window application startup begun. \");\n            //mainWindow.webContents.openDevTools({ mode:\"detach\" });\n            ipcMain.once(E.UI_READY,(_,mode) => {;\n                //set current mode;\n                currentMode = mode;\n                logger.info(\" ui ready. \");\n                nativeTheme.themeSource = mode;\n                // and load the index.html of the app.\n                // Open the DevTools.\n                //show user interface.\n                mainWindow.show();\n                ipcSend(mainWindow,E.DIR_PRESENT);\n            })\n        })\n    })\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.once('ready', createWindow);\n\napp.whenReady().then(() => {\n    globalShortcut.register(\"Ctrl+S\",() => {\n        return saveCurrentFile();\n    })\n})\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and import them here.\nipcMain.handle(E.UI_MODE_TOGGLE,(e) => {\n    //current mode\n    currentMode = currentMode == \"dark\"?\"light\":\"dark\";\n    //toggle native theme.\n    nativeTheme.themeSource = currentMode;  \n    //use of dark colors.\n    return nativeTheme.shouldUseDarkColors;\n})\n\nipcMain.on(E.DIR_PRESENT,(e,present) => {\n    CURRENT_DIRECTORY = present.currentDirectory;\n    PROJECT_TYPE = present.PROJECT_TYPE;\n    LanProcess = new ModelProcess({ \n        basepath:CURRENT_DIRECTORY,\n        project_type:PROJECT_TYPE,\n        babel_path:executable_path,\n        packed:true\n    });\n    LanProcess.setBaseDir(CURRENT_DIRECTORY);\n    //enable global shortcuts for new file creation and\n    //new directory creation\n    globalShortcut.register(\"Ctrl+n\",() => newNode('file'));\n    globalShortcut.register(\"Ctrl+d\",() => newNode('directory'));\n})\n\nipcMain.on(E.OPEN_FILES_PRESENT,async (e,openFiles) => \n{\n    await Promise.all(\n        Object.keys(openFiles).map(async file => {\n            let { path } = openFiles[file];\n            let sourceCode = '';\n            try {\n                sourceCode = await DirectoryActions.readFromFile(path);\n            }\n            catch(e) {}\n            openFiles[file].sourceCode = sourceCode;\n    }))\n\n    //send data over the main window.\n    ipcSend(mainWindow,E.OPEN_FILES_PRESENT,openFiles);\n})\n\nipcMain.on(E.NEW_FILE,async (e,filepath) => { \n   try {\n        await DirectoryActions.writeToFile(filepath,''); \n    }\n    catch(e) {\n        console.log(\" error occured \",e);\n        throw e;\n    }   \n})\nipcMain.on(E.NEW_FOLDER,async (e,filepath) => { \n    try {\n        await DirectoryActions.createDir(filepath);\n    }\n    catch(e) { \n        console.log(' error occured  in attempt to create new directory',e) \n        throw e;\n    }\n})\n\nasync function newNode(type) {\n    //user must choose directory in which new file will be based.\n    let dialogOptions = {\n        title:\"select directory\",\n            properties:['openDirectory'],\n            filters:{ name:\"All Files\",extensions:['*'] },\n            message:\"select directory\",\n            defaultPath:CURRENT_DIRECTORY\n        }\n        let data;\n        try {\n            data = await dialog.showOpenDialog(mainWindow,dialogOptions);\n        }\n        catch(e) { /* data not found. */throw e; }\n        switch(type) {\n            case 'file':ipcSend(mainWindow,E.NEW_FILE,data);\n                break;\n            case 'directory':\n                ipcSend(mainWindow,E.NEW_FOLDER,data);\n        }\n    }\n\n    ipcMain.handle(E.OPEN_DIR_PROMPT,(e,projectType) => {\n        //set project type.\n        PROJECT_TYPE = projectType;\n        let dialogOptions = {\n            title:\"select folder\",\n            properties:['openDirectory'],\n            filters:{ name:\"All Files\",extensions:['*'] },\n            message:\"select directory\"\n        }\n        return dialog.showOpenDialog(mainWindow,dialogOptions).then(async data => {\n            //once directory selected enable global shortcut for new file creation.\n            console.log(\" open directory data \",data);\n            globalShortcut.register(\"Ctrl+n\",() => newNode('file'));\n            //along with a global shortcut for new directory creation.\n            globalShortcut.register(\"Ctrl+d\",() => newNode(\"directory\"));\n            if (data.canceled) return data;\n            CURRENT_DIRECTORY = data.filePaths[0];\n            LanProcess = new ModelProcess({ \n                basepath:CURRENT_DIRECTORY,\n                project_type:PROJECT_TYPE,\n                babel_path:executable_path ,\n                packed:true\n            });\n            console.log(\" process \",LanProcess);\n            switch(PROJECT_TYPE) {\n                case 'javascript':\n                    console.log(\" javascript process \");\n                    LanProcess.transformProject()\n                        .then(() => \n                        {\n                            console.log(\" project transformation. \");\n                            if (LanProcess.project_init_complete) {\n                                console.log(\" project complete \",LanProcess.project_init_complete);\n                                let deps = LanProcess.getDependencies();\n                                //send project dependencies to main window.\n                                ipcSend(mainWindow,E.PROJECT_DEP,deps);\n                            }\n                        })\n                    break;\n            }\n            return data;\n        });\n    })\n\n\n    ipcMain.handle(E.OPEN_FILE,async (e,{ filepath,newlyCreated }) => {\n        //console.log(\" filepath obtained \",filepath);\n        let code;\n        try {\n            code = await DirectoryActions.readFromFile(filepath);\n        }\n        catch(e) {\n            code = newlyCreated ? '':`ERR:404\\nFile not found :/`;\n            throw e;\n        }\n        code = code.replace(';','\\n');\n        return code;\n    })\n\n    //in the instance where updated source code is to be saved.\n    ipcMain.on(E.SAVE_FILE,async (e,{filepath,sourceCode,update_file,lang }) => \n    {\n        try \n        {\n            //write the updated code to the filesystem.\n            await DirectoryActions.writeToFile(filepath.trim(),sourceCode);\n        }\n        catch(e) { throw e; }\n        console.log(\" written to successfully \");\n        if ( update_file ) await LanProcess.updateCode({ sourceCode,path:filepath,language:lang })\n    })\n\n    //in the instance when the user wishes to run the rendered gui of the\n    //code they're editing.\n    ipcMain.on(E.RUN_GUI,async (e,{ filepath,project,sourceCode }) => \n    {\n        let indexPath;\n        switch(project) {\n        case 'html':\n            indexPath = _PROJECTS[project];\n            console.log(\" indexPath \",indexPath);\n            //set up of the process window.\n            return ProcessWindowSetup({ indexpath:indexPath.index,processData:{ sourceCode,filepath } });\n        case 'javascript':\n            indexPath = _PROJECTS[project]; \n            return LanProcess.guiStartup()\n                .catch(e => {\n                    console.log(' error occured ',e);\n                    return;\n                })\n                .then(async project_data => {\n                    if ( LanProcess.project_init_complete ) {\n                        //javascript process dependencies.\n                        let _dependencies = LanProcess.getDependencies();\n\n                        ipcSend(mainWindow,E.PROJECT_DEP,_dependencies)\n                        //return process window setup.console.log(\" javascript index path \",indexPath);\n                        return ProcessWindowSetup({ \n                            indexpath:indexPath.index,processData:project_data\n                        });\n                    }\n                })\n        }\n    })\n\n    //in the instance when the gui is to be automatically updated\n    ipcMain.on(E.UPDATE_GUI,async (e,{ sourceCode,path,lang }) => {\n        //we send updated source code to the renderer process of the gui.\n        if (PROJECT_TYPE == 'javascript') {\n            console.log(\" project type is javascript\");\n            try {\n                sourceCode = await LanProcess.updateCode({ sourceCode,path,language:lang });\n            }\n            catch(e) { /** source code unable to be updated. */throw e; }\n        }\n        ipcSend(ProcessWindow,E.UPDATE_GUI,{ sourceCode,path,lang });\n    })\n\n    //in the instance when the gui process is requested to be stoppped.\n    ipcMain.on(E.STOP_GUI,() => \n    {\n        try {\n            ProcessWindow.close();\n            process_started = false;\n        }\n        catch(e) { /* process window no longer runnnig*/throw e; }\n    })\n}\ncatch(e) {\n    logger.error(e);\n    throw e;\n}\nunhandled();"],"file":"main.js"}