{"version":3,"sources":["../../src/db/directory.js"],"names":["_path","require","Directory","currentdir","nodedir","replace","dir","npath","func","n","dpath","path","_isPt","ch","children","child","Object","keys","childpath","resolve","console","log","traverseDir","name","parts","join","length","_parts","change","dc","isdir","isDirA","key","changeDir","module","exports"],"mappings":"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","sourcesContent":["const _path = require(\"path\");\r\n\r\n/** module provides basic functionality for iterating and obtaining files from the directory.\r\n * it provides basic methods for the handling of higher level tasks like mutation of openfiles \r\n * or directories.\r\n */\r\nclass Directory {\r\n\r\n    /**  functionality which determines whether or not current directory.\r\n     * is an ancestor of directory being looked for by comparing the paths of   the respective directory.\r\n     * @param currentdir     String object containing the path of the current directory.\r\n     * @param nodedir      - string object contianing the path of the node being looked for.\r\n     * @returns              boolean value of whether or not it is an ancestor of the path.\r\n     */\r\n     _isPt(currentdir,nodedir) { return nodedir.replace(currentdir,'') != nodedir; }\r\n\r\n     /**traverse directory function.\r\n      * functionality recursively traverses directory returning the child node with the \r\n      * matching path given.\r\n      * @param dir       object containing the current section of the directory being traversed.\r\n      * @param npath     String object refering to the path of the child node we are looking for.\r\n      * @param func      function object which mutates node object as specified by the user. \r\n      *                  defaults to simply returning the node object.\r\n      * @returns Child node object of the child node being looked for or an empty object\r\n      * if child node is not found.\r\n      */\r\n    traverseDir(dir,npath,func=n => n) \r\n    {\r\n        let dpath = dir.path;\r\n        if (!this._isPt(dpath,npath) ) { return {}; }\r\n        if ( npath == dpath ) return func(dir);\r\n        let ch = dir.children;\r\n        for (let child of Object.keys(ch)) {\r\n            const childpath = _path.resolve(ch[child].path,child);\r\n            console.log(\" directory part \",dir,\"  parent \",this._isPt(childpath,npath));\r\n            if (npath == childpath) { \r\n                console.log(\" child object \",ch[child]);\r\n                console.log(\"file found \",npath); return func(ch[child]) ;\r\n                \r\n            }\r\n            if (this._isPt(childpath,npath) ) { \r\n                return this.traverseDir(ch[child],npath,func);\r\n            }\r\n        }\r\n    }\r\n\r\n    isDirA({path,name,parts}) {\r\n        return `${path}/${name}` == parts.join('/') && name == parts[parts.length-1];\r\n    }\r\n\r\n    /** functionality which mutates only a specific part of the \r\n     * current directory and return the current directory with the specific part having been updated.\r\n     * @param dir          Object contianing the current part of the directory being  iterated through.\r\n     * @param _parts       array containing each component of the path of the node we are searching for.\r\n     * @param change       functionality which mutates the specific directory node.\r\n     * @returns updated directory object with the updated node .\r\n     */\r\n    changeDir(dir,_parts,change) \r\n    {\r\n        //list of current children.\r\n        let dc = {};\r\n        if (!dir.isdir) return dir;\r\n        else {\r\n            dc = dir.children;\r\n            if (this.isDirA({ path:dir.path,name:dir.name,parts:_parts })) {\r\n                return change(dir);\r\n            }\r\n            //console.log(\" directory found \",dir);\r\n            for (let key of Object.keys(dc)) { \r\n                //if the current element is the final node in the dir tree.\r\n                // the node we are looking for.\r\n                console.log(\" file \",this.isDirA({ path:dc[key].path,name:key,parts:_parts }),key);\r\n                if ( this.isDirA({ path:dc[key].path,name:key,parts:_parts }) ) {\r\n                    console.log(\" directory found \",dc);\r\n                    dc[key] = change(dc[key]);\r\n                }   \r\n                else if ( this._isPt(dc[key].path,_parts.join('/')) ) {\r\n                    dc[key] = this.changeDir(dc[key],_parts,change);\r\n                }\r\n            }\r\n            //return the directory.\r\n        \r\n            return { ...dir,children:dc };\r\n        }\r\n        \r\n        \r\n    }\r\n}\r\n\r\nmodule.exports = Directory;"],"file":"directory.js"}