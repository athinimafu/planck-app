{"version":3,"sources":["../../src/db/index.js"],"names":["db","require","session","SysDirectory","_self","$this","module","exports","onApplicationStart","getApplicationState","then","currentFileDetermination","mode","currentFile","getValue","e","setSessionState","key","value","path","trim","sourceCode","_initState","$self","getDB","updateProjectDependencies","dep","getDBValues","getOpenFilesData","openFiles","updatedOpenedFiles","console","log","Promise","all","Object","keys","map","file","filepath","readFromFile","updateProjectOpenFiles","updatedOpenFiles","getDependencies","dependencies","values","forEach","updateGUIState","stateChange","promise","database","error","updateState","openDirectory","directory_path","dir_type","map_dir","dir","newDirectory","fetchFile","functionality","saveFile","project","update_code","includes","updateOpenFiles","setValue","newNodeCreationPrompt","nodepath","type","openFile","prevOpenFilePath","newlyCreated","toggleFolder","folderpath","closeFile","filename","closeDirectory","closeCurrentDirectory","editFile","isRunning","currentSourceCode","openProject","directoryPath","projectType","cancelNodeCreation","createNode","nodename","newNode","nodetype"],"mappings":"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","sourcesContent":["const db = require(\"./db\");\r\nconst session = require(\"./sessionState\");\r\nconst SysDirectory = require(\"../directory\");\r\n\r\nlet _self;\r\nlet $this;\r\nmodule.exports = {\r\n    //on the start of the application.\r\n    session,\r\n    async onApplicationStart() { \r\n        return this.getApplicationState().then(db => \r\n            {\r\n                this.currentFileDetermination();\r\n                return db.mode;\r\n            });\r\n    },\r\n    async currentFileDetermination() \r\n    {\r\n        let currentFile ;\r\n        try {\r\n            currentFile = await db.getValue('currentFile');\r\n        }\r\n        catch(e) {}\r\n        if (currentFile) {\r\n            this.setSessionState([ \r\n                { \r\n                    key:\"currentSourceCode\",\r\n                    value:{ path:currentFile.path.trim(),sourceCode:currentFile.sourceCode } \r\n                } \r\n            ]);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @param{$self} React Application Component instance state.\r\n     * _initApplicationState -- > initializes the application state.\r\n    * enable application state to implement ui updates using the \r\n    * application's react ui component state.\r\n    */\r\n    async _initState($self) { \r\n        _self = $self;$this = this; \r\n        \r\n    },\r\n\r\n    //function returns the last working directory\r\n    async getApplicationState() { return await db.getDB(); },\r\n\r\n    //set project dependencies of the project.\r\n    async updateProjectDependencies(dep) { \r\n        this.setSessionState([ { key:\"dependencies\",value:dep } ])\r\n        return await db.updateProjectDependencies(dep) \r\n    },\r\n\r\n    //functionality to obtain db values.\r\n    async getDBValues(value) \r\n    {\r\n        return await db.getValue(value);\r\n    },\r\n\r\n    //read open files source code.\r\n    async getOpenFilesData()\r\n    {\r\n        let openFiles = {},updatedOpenedFiles = {};\r\n        try {\r\n            openFiles = await this.getDBValues('openFiles');\r\n        }\r\n        catch(e)  {\r\n            console.log(\" error occured while getting open files \",e);\r\n        }\r\n        await Promise.all(\r\n            Object.keys(openFiles).map(async file => {\r\n                let filepath = openFiles[file].path;\r\n                let sourceCode;\r\n                try {\r\n                    sourceCode = await SysDirectory.readFromFile(filepath);\r\n                }\r\n                catch(e) {};\r\n                updatedOpenedFiles[file] = {  ...openFiles[file],sourceCode };\r\n            })\r\n        );\r\n        return db.updateProjectOpenFiles({ updatedOpenFiles:updatedOpenedFiles });\r\n    },\r\n\r\n    getDependencies() { return this.session.dependencies;  },\r\n\r\n    async setSessionState(values) \r\n    { \r\n        values.forEach(({key,value}) => { this.session[key] = value; })\r\n        return true;\r\n    },\r\n    async updateGUIState(values) { return this.stateChange(this.setSessionState(values)) },\r\n\r\n    /** @param{promise} function<Promise{}> promise argument is a function which returns a promise as its\r\n     * return value -> once the promise resolves ui is updated.\r\n    */\r\n    stateChange(promise) \r\n    { \r\n        return promise.then(async () => {\r\n            let database;\r\n            try {\r\n                database = await this.getApplicationState();\r\n            }\r\n            catch(e) { console.error(e);  }\r\n            //update React component ui state.\r\n            return _self.updateState( { ...this.session,...database }  )\r\n        })\r\n    },\r\n\r\n    //functionality which opens up a directory and returns all nodes of directory tree.\r\n    async openDirectory(directory_path,dir_type,map_dir) {\r\n        let dir = {}\r\n        try {\r\n            dir = await SysDirectory.openDirectory(directory_path);\r\n        }\r\n        catch(e) {\r\n            console.log(`directory unable to be loaded ${e}`);\r\n            return;\r\n        }       \r\n        return this.stateChange(db.newDirectory(directory_path,dir,dir_type,map_dir));\r\n    },\r\n\r\n    //functionality for fetching the current file being worked on.\r\n    async fetchFile() {\r\n        //save database file.\r\n        this.functionality.saveFile();\r\n\r\n        let project = {};\r\n        try {\r\n            project = await db.getValue(\"project\");\r\n        }\r\n        catch(e) { console.log(\" error occured \",e); }\r\n\r\n        //return file currently being worked on.\r\n        return  db.getValue('currentFile').then(file => {\r\n            return { \r\n                ...file,\r\n                update_code:project.dependencies.includes(file.path) \r\n            }\r\n        });\r\n    },\r\n\r\n\r\n    //functionality updates open files object.\r\n    \r\n    async updateOpenFiles(openFiles)\r\n    {\r\n        return this.stateChange( db.setValue(\"openFiles\",openFiles) );\r\n    },\r\n\r\n    //inform ui state of creation of a new file.\r\n    async newNodeCreationPrompt(nodepath,type) {\r\n        console.log(' creating node in filepath ',nodepath);\r\n        return this.stateChange(\r\n            this.setSessionState([\r\n                 { key:\"newNodeCreation\",value:true },{ key:'newNode',value:{ nodepath,type } } \r\n            ])\r\n        );\r\n    },\r\n    functionality:{\r\n        //functionality which opens a specific file.\r\n        //functionality calls database file to perform read  operation of file source.\r\n        async openFile({ filepath,sourceCode,prevOpenFilePath,newlyCreated }) \r\n        {\r\n            console.log(' file path ',filepath);\r\n            $this.setSessionState([\r\n                { key:\"currentSourceCode\",value:{ path:filepath,sourceCode } }\r\n            ]);\r\n            return await $this.stateChange(\r\n                db.openFile({ filepath,sourceCode,prevOpenFilePath,newlyCreated })\r\n            );\r\n        },\r\n\r\n        //functionality that enables the expanding of a folder's contents and hiding them aswell.\r\n        async toggleFolder(folderpath) \r\n        {\r\n            return await $this.stateChange( db.toggleFolder(folderpath) );\r\n        },\r\n\r\n        //close file closes the file pasts as an argument.\r\n        async closeFile(filename) \r\n        {\r\n            let currentFile;\r\n            try {\r\n                currentFile = await db.closeFile({ filename });\r\n            }\r\n            catch(e) {}\r\n            //set value of current source code.\r\n            return $this.stateChange(\r\n                $this.setSessionState([\r\n                     { \r\n                         key:\"currentSourceCode\",\r\n                         value:{ sourceCode:currentFile.sourceCode || '',path:currentFile.path } } \r\n                ])\r\n            );\r\n        \r\n        },\r\n\r\n        //closeDirectory functionality closes the directory.\r\n        async closeDirectory() \r\n        {\r\n            //closed directory.\r\n            SysDirectory.closeDirectory();\r\n            return await $this.stateChange( db.closeCurrentDirectory() );\r\n        },\r\n        //functionality for when the current file is being edited.\r\n        async editFile({sourceCode,isRunning})  \r\n        { \r\n            //console.log(' current source code ',$this.session.currentSourceCode);\r\n            if (isRunning)\r\n                $this.setSessionState([ \r\n                    { \r\n                        key:'currentSourceCode',\r\n                        value:{ ...$this.session.currentSourceCode,sourceCode:sourceCode } \r\n                    } \r\n                ]);\r\n            return await $this.stateChange(db.editFile(sourceCode)); \r\n        },\r\n\r\n        //functionality for saving the current file being focused on.\r\n        async saveFile() { return await $this.stateChange(db.saveFile()); },\r\n\r\n        async openProject({ directoryPath,projectType }) {\r\n            //simply return sysdirectory open directory function with a html project type.\r\n            return $this.openDirectory(directoryPath,projectType)\r\n        },\r\n         //cancel process of creating a new file.\r\n        async cancelNodeCreation() {\r\n            return $this.stateChange(\r\n                $this.setSessionState([\r\n                    { key:\"newNodeCreation\",value:false },{ key:\"newNode\",value:null }\r\n                ])\r\n            );\r\n        },\r\n\r\n        //create file functionality.\r\n        async createNode(nodename) {\r\n            let { nodepath,type } = $this.session.newNode;\r\n            $this.setSessionState([ \r\n                { key:\"newNodeCreation\",value:false },{ key:\"newNode\",value:null } \r\n            ]);\r\n            return $this.stateChange( db.newNode({ nodename,nodepath,nodetype:type }) );\r\n        },  \r\n    }\r\n}"],"file":"index.js"}