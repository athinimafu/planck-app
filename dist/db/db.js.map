{"version":3,"sources":["../../src/db/db.js"],"names":["_lf","require","path","Directory","DirFunctions","path_sep","sep","RegExp","A","DIR_OPEN","DIR_CLOSED","FILE_OPEN","_SCHEMA","name","children","working","isExpanded","sourceCode","isSaved","fileType","isdir","openFiles","SUPPORTED_TYPES","mode","prevAction","project","type","dependencies","_dbKeys","Fonst","getValue","key","getItem","_filepath","p","split","_setItem","k","v","then","current","setItem","setValue","value","Array","isArray","Promise","all","map","el","setValues","values","initDb","config","driver","INDEXEDDB","storeName","_save","directory","_edit","_toggle","_open","open","_close","_resetDB","dbKeys","e","console","error","keys","determinePathSep","file_path","includes","_getDb","db","log","deleteDB","curFileFormat","filename","filepath","extname","getDB","applicationState","database","Object","updateProjectOpenFiles","updatedOpenFiles","currentFile","newDirectory","project_type","mappingDir","to_dir","dirname","length","seperator","currentDirectory","filter","t","join","numOfChildren","updatedValues","concat","updateProjectDependencies","mutateCurrentDir","_mutate","updatedDirectory","toggleFolder","folderpath","paths","changeDir","closeFile","oparray","isCurrent","dir","updatedFile","file","newNode","nodename","nodepath","nodetype","_newNode","lang","newlyCreated","_change","mutateOpenFiles","actions","openFile","prevOpenFilePath","parts","openFilesActions","push","object","prevpath","prevfilename","obj","f","saveFile","editFile","updatedFiles","closeCurrentDirectory","module","exports"],"mappings":"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","sourcesContent":["const _lf = require(\"localforage\");\nconst path = require(\"path\");\nconst Directory = require(\"./directory\");\n\nconst DirFunctions = new Directory();\n\nconst path_sep = path.sep == \"\\\\\" ? new RegExp('(\\\\\\\\|\\\\/)','g') : new RegExp('\\\\/','g')\n\nconst A = { \n    DIR_OPEN:\"DIRECTORY-OPEN\",\n    DIR_CLOSED:\"DIRECTORY-CLOSED\",\n    FILE_OPEN:\"FILE-OPEN\"\n}\n\nconst _SCHEMA = {\n    \"appState\":null,\n    \"currentDirectory\":{\n        name:\"\",\n        children:null,\n        working:false,\n        isExpanded:false,\n        path:\"\"\n    },\n    \"currentFile\":{\n        name:\"\",\n        sourceCode:\"\",\n        isSaved:false,\n        fileType:\"\",\n        isdir:false,\n        path:''\n    },\n    openFiles:{},\n    SUPPORTED_TYPES:{ \".js\":\"javascript\",\".html\":\"html\",\".css\":\"css\",\".json\":\"json\" },\n    mode:\"dark\",\n    prevAction:\"\",\n    project:{\n        type:'',\n        path:'',\n        dependencies:[]\n    }\n}\n\nconst _dbKeys = [ \"appState\",\"currentDirectory\",\"currentFile\",\"SUPPORTED_TYPES\",\"mode\",\"openFiles\",\"prevAction\",\"project\"];\n\n\n\nconst Fonst = {\n    getValue( key ) { return _lf.getItem(key); },\n\n    _filepath(p) { return p.split(path.sep);  },\n\n\t_setItem(k,v) {\n\t\tif ( typeof v == \"function\" ) {\n\t\t\treturn this.getValue(k).then(current => _lf.setItem(k,v(current)) )\n\t\t}\n\t\treturn _lf.setItem(k,v); \n\t},\n\n\t/** set value of a key in database.\n\t * @param string key -> database key which is being mutated.\n\t * @param string | function value -> either the updated value or the the function which mutates the value o\n\t * of the key.\n\t * @returns Promise<{}> object which resolves when key is updated to new value.\n\t */\n\tsetValue( key,value ) { \n\t\tif ( !Array.isArray(key) ) { key = [key] }\n\n\t\t//return promise that resolves when all the updated values have been set.\n\t\treturn Promise.all( key.map(el => this._setItem(el,value)) )\n\t},\n\n\n\t/**set multiple values of the multiple keys in the database.\n\t* @param array values -> array of objects containing key value fields \n\t* @returns Promise<{}> object -> resolves when all values and keys have been set.\n\t*/\n\tsetValues(values) {\n\t\treturn Promise.all(values.map(({key,value}) => this._setItem(key,value)))\n\t},\n\t\n\n\t/** initialize localforage database with user data. only set when user initially registers.\n\t * @returns void\n\t */\n\tasync initDb() {\n\t\t_lf.config({\n\t\t\tdriver:_lf.INDEXEDDB,\n\t\t\tname:`planck-ide-data`,\n\t\t\tstoreName:\"planck-data\",\n\t\t})\n\t},\n\t\n\n    // helper functions for changeDir function.\n\n    //save function.\n    _save(directory)   {  return { ...directory,isSaved:true }; },\n    //edit function.\n    _edit(directory)   { return { ...directory,isSaved:false }; },\n    //toggle function.\n    _toggle(directory) { return { ...directory,isExpanded:!directory.isExpanded } },\n    //open function.\n    _open(directory)   { return { ...directory,open:true } },\n    //close function.\n    _close(directory)  { return { ...directory,open:false } },\n\n\tasync _resetDB() \n    {\n\t\tfor ( let key of dbKeys ) {\n\t\t\ttry {\n\t\t\t\tawait this.setValue(key,null);\n\t\t\t}\n\t\t\tcatch(e) { console.error(e); }\n\t\t}\n\t},\n\n\t//obtain database keys.\n\tkeys()  { return _lf.keys() },\n\n    determinePathSep(file_path)\n    {\n        if (path.sep == \"\\\\\") {\n            return file_path.includes('/') ? '/':path.sep;\n        }\n        return '/';\n    },\n\n    /**obtain database values if database exists. */\n    async _getDb() \n    {\n        let db = {};\n        for (let key of _dbKeys) {\n            try {\n                db[key] = (await this.getValue(key)) || _SCHEMA[key];\n            }\n            catch(e) {\n                console.log(\" error occured \");\n                throw e;\n            }\n        }\n        return db;\n    },\n\n    async deleteDB() {\n        for (let key of _dbKeys) {\n            await this.setValue(key,_SCHEMA[key]);\n        }\n    },\n\n    //returns current file database format.\n    curFileFormat({filename,sourceCode,filepath}) \n    {\n        return {\n            name:filename,\n            sourceCode,\n            isSaved:true,\n            fileType:_SCHEMA.SUPPORTED_TYPES[path.extname(filepath)],\n            path:filepath\n        }\n    },\n\n\n    /** application startup retrieve database.if that operation throws database\n     * (we conclude database hasn't been created) then we initialise database  \n     * then return default database values. else we return current database provided.\n    */\n    async getDB() \n    {\n        let applicationState = {};\n        try {\n            //console.log(' obtaining db ');\n            return await this._getDb();\n        }\n        catch(e) {\n            //in the event that database has not been initialized.\n            //initialize database.\n            await this.initDb();\n            let database = Object.keys(_SCHEMA).map(key => { return { key,value:_SCHEMA[key] } });\n\n            //set default values of database.\n            await this.setValues(database);\n            applicationState = _SCHEMA;\n        }\n        //return application state\n        return applicationState;\n    },\n\n    /** determine whether the project's currently open files have been changed.\n     * if they have then update the openFiles attribute to contain these newly contained\n     * open files.\n     * parameters passed:\n     * @param updatedOpenFiles --> object containing updated source code of the currently opened files.\n     * @returns void.\n      */\n    async updateProjectOpenFiles({ updatedOpenFiles }) \n    {\n        let openFiles = {};\n        let currentFile = {};\n        try {\n            openFiles = await this.getValue('openFiles');\n            currentFile = await this.getValue(\"currentFile\");\n        }\n        catch(e) {}\n        for ( let filename of Object.keys(openFiles) ) {\n            if (currentFile && currentFile.path == updatedOpenFiles[filename].path) {\n                currentFile.sourceCode = updatedOpenFiles[filename].sourceCode;\n            }\n            openFiles[filename] = {\n                ...openFiles[filename],sourceCode:updatedOpenFiles[filename].sourceCode\n            }\n        }\n        //set openFiles object.\n        try {\n            await this.setValue('currentFile',currentFile);\n        }\n        catch(e) { console.log(\" unable to update currentFile object \",e); }\n\n        return await this.setValue('openFiles',openFiles);\n    },\n\n    /** functionality which obtains and maps a new directory.\n     * @param children       object containing children of new directory.\n     * @param filepath       path to the current directory. \n     * @param project_type   languages type being used in the directory source code\n     * @param mappingDir     boolean value of whether or not this is simply updating directory\n    */\n    async newDirectory(filepath,children,project_type,mappingDir=false) \n    {\n        let to_dir = filepath.split(path_sep);\n        let dirname = to_dir[to_dir.length-1];\n        let seperator = this.determinePathSep(filepath); \n        let currentDirectory = {\n            name:dirname,\n            path:to_dir.filter(t => t != dirname).join(seperator),\n            currentFile:null,\n            children,\n            numOfChildren:Object.keys(children).length,\n            isExpanded:true,\n            isdir:true\n        }\n\n        let updatedValues = [\n            { key:'currentDirectory',value:currentDirectory},\n            { key:'project',value:{ type:project_type,path:filepath,dependencies:[] } }\n        ];\n        updatedValues = mappingDir ? updatedValues:updatedValues.concat({ key:\"appState\",value:A.DIR_OPEN });\n\n        //set provided  values for updated directory.\n        return this.setValues(updatedValues);\n    },\n\n    //update the project dependencies.\n    async updateProjectDependencies(dependencies)\n    {\n        let project;\n        try {\n            project = await this.getValue('project');\n        }\n        catch(e) {}\n\n        return this.setValue('project',{ ...project,dependencies });\n    },\n\n    /**functionality that takes in a function as an argument that is\n     * @param {_mutate}  -> function provided by user that changes directory in the way user wishes it to change.\n     * @returns Promise<Object> containing the updated directory or null.\n     */\n    async mutateCurrentDir({ _mutate }) \n    {\n        let currentDirectory = {};\n        try {\n            currentDirectory = await this.getValue(\"currentDirectory\");\n        }\n        catch(e) {\n            console.log(e);\n        }\n        //obtain updated value of the directory.\n        let updatedDirectory = _mutate(currentDirectory);\n        //if updatedDirectory is valid then update value of currentDirectory key.\n        return updatedDirectory ? this.setValue(\"currentDirectory\",updatedDirectory) : null;\n    },\n\n    /**\n     * gui functionality responsible for enabling graphical opening of folders in file directory\n     * through the change of state.\n     * \n     */\n    async toggleFolder(folderpath) \n    {\n        let paths = folderpath.split('/');\n        let currentDirectory = {};\n        try {\n            currentDirectory = await this.getValue('currentDirectory');\n        }\n        catch(e) {}\n        //make appropriate manipulations to the current directory.\n        currentDirectory = DirFunctions.changeDir(currentDirectory,paths,this._toggle);\n\n        return await this.setValue(\"currentDirectory\",currentDirectory);\n    },\n\n    //closeFile functionality closes file given by the current data.\n    //filename -> string value of the file being closed.\n    //filepath -> string value of the path to the file being closed.\n    //isCurrent -> boolean value of whether the file is the current file being displayed.\n    async closeFile({ filename }) \n    {\n        let openFiles = {};\n        try \n        {\n            openFiles = await this.getValue(\"openFiles\");\n        }\n        catch(e) {};\n        let updatedValues = [];\n        let oparray = Object.keys(openFiles);\n        let currentFile = {};\n        if (openFiles[filename].isCurrent) {\n            //then currentFile must be updated obtain the first file open and set that as \n            //the new currentFile.\n            //if openFile is the only open file we change state to directory.\n            switch(oparray.length) \n            {\n                case 1:\n                    //in this case we reset ui to directory display mode.\n                    let _mutate = dir => { return { ...dir,currentFile:null }; }\n                    try \n                    {\n                        //mutate current directory.\n                        await this.mutateCurrentDir({ _mutate })\n                    }\n                    catch(e) {}\n                    openFiles = {};\n                    //updated application state\n                    updatedValues = updatedValues.concat({ key:\"appState\",value:A.DIR_OPEN })\n                    break;\n\n                default:\n                    //if there is more than 1 file then we find new current file and\n                    //update values in db.\n                    let updatedFile = \"\";\n                    for (let file of oparray ) {\n                        if (file != filename) {  updatedFile = file;break; }\n                    }\n                    //delete closed file.\n                    delete openFiles[filename];\n                    //update value of new currentFile.\n                    //new current file values.\n                    currentFile = openFiles[updatedFile];\n                    updatedValues = updatedValues.concat({key:'currentFile',value:currentFile});\n                    openFiles[updatedFile] = { ...currentFile,isCurrent:true };\n                    break;\n            }\n        }\n        else /*if file is not current then we delet file.*/delete openFiles[filename];\n        //update keys.\n        try  {\n            await this.setValues(\n                [ { key:\"openFiles\",value:openFiles }].concat(updatedValues)\n            )\n        }\n        catch(e) {}\n        return currentFile;\n    },\n\n    async newNode({ nodename,nodepath,nodetype })\n    {\n        //add the new file to the current directory.\n        let currentDirectory = {};\n        let _newNode = {};\n        if (nodetype == 'file') {\n            let fileType  = path.extname(nodename),lang;\n            try {\n                lang = (await this.getValue('SUPPORTED_TYPES'))[fileType]\n            }\n            catch(e) {}\n            _newNode = {\n                path:nodepath,\n                isdir:false,\n                sourceCode:'',\n                fileType:lang,\n                open:false,\n                newlyCreated:true\n            }\n        }\n        else {\n            _newNode = {\n                name:nodename,\n                path:nodepath,\n                currentFile:null,\n                children:{},\n                numOfChildren:0,\n                isExpanded:false,\n                isdir:true\n            }       \n        }\n        let _change = (directory) => \n            {  \n                let children = directory.children;\n                children[nodename] = _newNode;\n                return { ...directory,children }  \n            }\n        try {\n            //obtain the value of the current directory.\n            currentDirectory = await this.getValue('currentDirectory');\n            //change directory add new file to directory whose path matches that given\n            currentDirectory = await DirFunctions.changeDir(currentDirectory,nodepath.split(path_sep),_change);\n            return this.setValue('currentDirectory',currentDirectory);\n        }\n        catch(e) { /* unable to mutate current directory. */console.log(' error has occured ',e); }\n    },\n\n    //does mutations to the 'openFiles' object in the database\n    //'actions' array contains key ,value pairs of filenames and updated values.\n    async mutateOpenFiles({ actions }) \n    {\n        let openFiles = {};\n        try {\n            openFiles = await this.getValue(\"openFiles\");\n        }\n        catch(e) { console.log(\" error obtained in mutateOpenFiles function \",e); }\n        //complete actions on openFiles object.\n        actions.map( ({ key,value }) => \n        {     \n            if (typeof value == \"function\") \n            {\n                openFiles[key] = value(openFiles);\n            }\n            else openFiles[key] = value; \n        })        \n        return this.setValue('openFiles',openFiles);\n    },\n\n    /**functionality responsible for opening and set a file as the current file being edited in the text editor\n    filepath -> string type path to source file \n    sourceCode -> string value which copy of the file's contents\n    isInDirectory -> boolean value referring to whether or not file is in current project directory open.\n    prevOpenFile -> string value. whether or not there was a file previously open*/\n    async openFile({ filepath,sourceCode,prevOpenFilePath,newlyCreated }) \n    {\n        let parts = filepath.split(path_sep);\n        let openFilesActions = [];\n        //obtain the current filename for the directory.\n        let filename = parts[parts.length-1];\n        let currentFile = this.curFileFormat({ filename,sourceCode,filepath });\n        //set file in the list of currently open file.\n        openFilesActions.push(\n            { \n                key:filename,\n                value:(object) => {\n                    if (object[filename]) {\n                        currentFile.isSaved = object[filename].isSaved;\n                        return { ...object[filename],isCurrent:true }\n                    }\n                    return ({ ...currentFile,isCurrent:true })\n                }\n        });\n        //list of updated values which will be set in the database.\n        //if file has been previously opened.\n        if (prevOpenFilePath) {\n            let prevpath = prevOpenFilePath.split(path_sep);\n            let prevfilename = prevpath[prevpath.length-1];\n            openFilesActions.push(\n                { \n                    key:prevfilename,\n                    value:obj => ({ ...obj[prevfilename],isCurrent:false })\n                });    \n        }\n        //update openFile object.\n        try {\n            if (newlyCreated) {\n                let currentDirectory = await this.getValue('currentDirectory');\n                function _change(directory) {\n                    let children = directory.children;\n                    children[filename] = { ...children[filename],newlyCreated:false }\n                    return { ...directory,children }\n                }\n                currentDirectory = DirFunctions.changeDir(currentDirectory,parts.filter(f => f != filename),_change);\n\n                //set current directory value to false.\n                await this.setValue('currentDirectory',currentDirectory);\n            }\n            //update previously opened file in currentDirectory\n            await this.mutateOpenFiles({ actions:openFilesActions });\n        }\n        catch(e) { console.log(\" error obtained \",e);throw e; }\n        //set values in database.\n        return await this.setValues([\n            { key:\"currentFile\",value:currentFile },\n            { key:\"appState\",value:A.FILE_OPEN },\n            { key:\"prevAction\",value:\"open\" },\n        ]);\n    },\n    \n    //functionality used to save the current file.\n    async saveFile() \n    {\n        let currentFile = {};\n        try \n        {\n            currentFile      = await this.getValue(\"currentFile\");\n        }\n        catch(e) {}\n        let filename = currentFile.name;\n        try \n        {//update openFiles value.\n            await this.mutateOpenFiles({ \n                actions:[ { \n                    key:filename,\n                    value:obj =>  { \n                        return { ...obj[filename],isSaved:true,sourceCode:currentFile.sourceCode }  \n                    }\n                }] \n            })\n        }\n        catch(e) {}\n        //set values of currentDirectory,currentFile and openFiles.\n        return await this.setValues([\n            { key:\"currentFile\",value:{ ...currentFile,isSaved:true } },\n            { key:\"prevAction\",value:\"save\" }\n        ]);\n    },\n\n    //case where file is being edited and therefore must be updated as not saved.\n    async editFile(sourceCode) {\n        let currentFile = await this.getValue(\"currentFile\");\n        let updatedFiles = [ \n            { key:\"currentFile\",value:{ ...currentFile,isSaved:false,sourceCode } },\n            { key:\"prevAction\",value:\"edit\" }\n        ]\n        //if the current file is currently said to be saved then we manipulate that.\n        //if (currentFile.isSaved) {\n        this.mutateOpenFiles({\n            actions:[ \n                { \n                    key:currentFile.name,\n                    value:obj => { return { ...obj[currentFile.name],isSaved:false,sourceCode } } \n                }]\n        })\n        //return updated values.\n        return await this.setValues(updatedFiles);\n    },\n\n    async closeCurrentDirectory() { return this.deleteDB(); }\n}\n\nmodule.exports =  Fonst;"],"file":"db.js"}