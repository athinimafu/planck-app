{"version":3,"sources":["../../src/db/db.js"],"names":["_lf","require","path","Directory","DirFunctions","A","DIR_OPEN","DIR_CLOSED","FILE_OPEN","_SCHEMA","name","children","working","isExpanded","sourceCode","isSaved","fileType","isdir","openFiles","SUPPORTED_TYPES","mode","prevAction","project","type","dependencies","_dbKeys","Fonst","getValue","key","getItem","_filepath","p","split","_setItem","k","v","then","current","setItem","setValue","value","Array","isArray","Promise","all","map","el","setValues","values","initDb","config","driver","INDEXEDDB","storeName","_save","directory","_edit","_toggle","_open","open","_close","_resetDB","dbKeys","e","console","error","keys","_getDb","db","log","deleteDB","curFileFormat","filename","filepath","extname","getDB","applicationState","database","Object","updateProjectOpenFiles","updatedOpenFiles","currentFile","newDirectory","project_type","mappingDir","to_dir","sep","dirname","length","currentDirectory","filter","t","join","numOfChildren","updatedValues","concat","updateProjectDependencies","mutateCurrentDir","_mutate","updatedDirectory","toggleFolder","folderpath","paths","changeDir","closeFile","oparray","isCurrent","dir","updatedFile","file","newNode","nodename","nodepath","nodetype","_newNode","lang","newlyCreated","_change","mutateOpenFiles","actions","openFile","prevOpenFilePath","parts","openFilesActions","push","object","prevpath","prevfilename","obj","f","saveFile","editFile","updatedFiles","closeCurrentDirectory","window","AppState","module","exports"],"mappings":"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","sourcesContent":["const _lf = require(\"localforage\");\r\nconst path = require(\"path\");\r\nconst Directory = require(\"./directory\");\r\n\r\nconst DirFunctions = new Directory();\r\n\r\nconst A = { \r\n    DIR_OPEN:\"DIRECTORY-OPEN\",\r\n    DIR_CLOSED:\"DIRECTORY-CLOSED\",\r\n    FILE_OPEN:\"FILE-OPEN\"\r\n}\r\n\r\nconst _SCHEMA = {\r\n    \"appState\":null,\r\n    \"currentDirectory\":{\r\n        name:\"\",\r\n        children:null,\r\n        working:false,\r\n        isExpanded:false,\r\n        path:\"\"\r\n    },\r\n    \"currentFile\":{\r\n        name:\"\",\r\n        sourceCode:\"\",\r\n        isSaved:false,\r\n        fileType:\"\",\r\n        isdir:false,\r\n        path:''\r\n    },\r\n    openFiles:{},\r\n    SUPPORTED_TYPES:{ \".js\":\"javascript\",\".html\":\"html\",\".css\":\"css\",\".json\":\"json\" },\r\n    mode:\"dark\",\r\n    prevAction:\"\",\r\n    project:{\r\n        type:'',\r\n        path:'',\r\n        dependencies:[]\r\n    }\r\n}\r\n\r\nconst _dbKeys = [ \"appState\",\"currentDirectory\",\"currentFile\",\"SUPPORTED_TYPES\",\"mode\",\"openFiles\",\"prevAction\",\"project\"];\r\n\r\n\r\n\r\nconst Fonst = {\r\n    getValue( key ) { return _lf.getItem(key); },\r\n\r\n    _filepath(p) { return p.split('/');  },\r\n\r\n\t_setItem(k,v) {\r\n\t\tif ( typeof v == \"function\" ) {\r\n\t\t\treturn this.getValue(k).then(current => _lf.setItem(k,v(current)) )\r\n\t\t}\r\n\t\treturn _lf.setItem(k,v); \r\n\t},\r\n\r\n\t/** set value of a key in database.\r\n\t * @param string key -> database key which is being mutated.\r\n\t * @param string | function value -> either the updated value or the the function which mutates the value o\r\n\t * of the key.\r\n\t * @returns Promise<{}> object which resolves when key is updated to new value.\r\n\t */\r\n\tsetValue( key,value ) { \r\n\t\tif ( !Array.isArray(key) ) { key = [key] }\r\n\r\n\t\t//return promise that resolves when all the updated values have been set.\r\n\t\treturn Promise.all( key.map(el => this._setItem(el,value)) )\r\n\t},\r\n\r\n\r\n\t/**set multiple values of the multiple keys in the database.\r\n\t* @param array values -> array of objects containing key value fields \r\n\t* @returns Promise<{}> object -> resolves when all values and keys have been set.\r\n\t*/\r\n\tsetValues(values) {\r\n\t\treturn Promise.all(values.map(({key,value}) => this._setItem(key,value)))\r\n\t},\r\n\t\r\n\r\n\t/** initialize localforage database with user data. only set when user initially registers.\r\n\t * @returns void\r\n\t */\r\n\tasync initDb() {\r\n\t\t_lf.config({\r\n\t\t\tdriver:_lf.INDEXEDDB,\r\n\t\t\tname:`planck-ide-data`,\r\n\t\t\tstoreName:\"planck-data\",\r\n\t\t})\r\n\t},\r\n\t\r\n\r\n    // helper functions for changeDir function.\r\n\r\n    //save function.\r\n    _save(directory)   {  return { ...directory,isSaved:true }; },\r\n    //edit function.\r\n    _edit(directory)   { return { ...directory,isSaved:false }; },\r\n    //toggle function.\r\n    _toggle(directory) { return { ...directory,isExpanded:!directory.isExpanded } },\r\n    //open function.\r\n    _open(directory)   { return { ...directory,open:true } },\r\n    //close function.\r\n    _close(directory)  { return { ...directory,open:false } },\r\n\r\n\tasync _resetDB() \r\n    {\r\n\t\tfor ( let key of dbKeys ) {\r\n\t\t\ttry {\r\n\t\t\t\tawait this.setValue(key,null);\r\n\t\t\t}\r\n\t\t\tcatch(e) { console.error(e); }\r\n\t\t}\r\n\t},\r\n\r\n\t//obtain database keys.\r\n\tkeys()  { return _lf.keys() },\r\n\r\n    /**obtain database values if database exists. */\r\n    async _getDb() \r\n    {\r\n        let db = {};\r\n        for (let key of _dbKeys) {\r\n            try {\r\n                db[key] = (await this.getValue(key)) || _SCHEMA[key];\r\n            }\r\n            catch(e) {\r\n                console.log(\" error occured \");\r\n                throw e;\r\n            }\r\n        }\r\n        return db;\r\n    },\r\n\r\n    async deleteDB() {\r\n        for (let key of _dbKeys) {\r\n            await this.setValue(key,_SCHEMA[key]);\r\n        }\r\n    },\r\n\r\n    //returns current file database format.\r\n    curFileFormat({filename,sourceCode,filepath}) \r\n    {\r\n        return {\r\n            name:filename,\r\n            sourceCode,\r\n            isSaved:true,\r\n            fileType:_SCHEMA.SUPPORTED_TYPES[path.extname(filepath)],\r\n            path:filepath\r\n        }\r\n    },\r\n\r\n\r\n    /** application startup retrieve database.if that operation throws database\r\n     * (we conclude database hasn't been created) then we initialise database  \r\n     * then return default database values. else we return current database provided.\r\n    */\r\n    async getDB() \r\n    {\r\n        let applicationState = {};\r\n        try {\r\n            //console.log(' obtaining db ');\r\n            return await this._getDb();\r\n        }\r\n        catch(e) {\r\n            //in the event that database has not been initialized.\r\n            //initialize database.\r\n            await this.initDb();\r\n            let database = Object.keys(_SCHEMA).map(key => { return { key,value:_SCHEMA[key] } });\r\n\r\n            //set default values of database.\r\n            await this.setValues(database);\r\n            applicationState = _SCHEMA;\r\n        }\r\n        //return application state\r\n        return applicationState;\r\n    },\r\n\r\n    /** determine whether the project's currently open files have been changed.\r\n     * if they have then update the openFiles attribute to contain these newly contained\r\n     * open files.\r\n     * parameters passed:\r\n     * @param updatedOpenFiles --> object containing updated source code of the currently opened files.\r\n     * @returns void.\r\n      */\r\n    async updateProjectOpenFiles({ updatedOpenFiles }) \r\n    {\r\n        let openFiles = {};\r\n        let currentFile = {};\r\n        try {\r\n            openFiles = await this.getValue('openFiles');\r\n            currentFile = await this.getValue(\"currentFile\");\r\n        }\r\n        catch(e) {}\r\n        for ( let filename of Object.keys(openFiles) ) {\r\n            if (currentFile && currentFile.path == updatedOpenFiles[filename].path) {\r\n                currentFile.sourceCode = updatedOpenFiles[filename].sourceCode;\r\n            }\r\n            openFiles[filename] = {\r\n                ...openFiles[filename],sourceCode:updatedOpenFiles[filename].sourceCode\r\n            }\r\n        }\r\n        //set openFiles object.\r\n        try {\r\n            await this.setValue('currentFile',currentFile);\r\n        }\r\n        catch(e) { console.log(\" unable to update currentFile object \",e); }\r\n\r\n        return await this.setValue('openFiles',openFiles);\r\n    },\r\n\r\n    /** functionality which obtains and maps a new directory.\r\n     * @param children       object containing children of new directory.\r\n     * @param filepath       path to the current directory. \r\n     * @param project_type   languages type being used in the directory source code\r\n     * @param mappingDir     boolean value of whether or not this is simply updating directory\r\n    */\r\n    async newDirectory(filepath,children,project_type,mappingDir=false) \r\n    {\r\n        let to_dir = filepath.split(path.sep);\r\n        let dirname = to_dir[to_dir.length-1];\r\n        \r\n        let currentDirectory = {\r\n            name:dirname,\r\n            path:to_dir.filter(t => t != dirname).join('/'),\r\n            currentFile:null,\r\n            children,\r\n            numOfChildren:Object.keys(children).length,\r\n            isExpanded:true,\r\n            isdir:true\r\n        }\r\n\r\n        let updatedValues = [\r\n            { key:'currentDirectory',value:currentDirectory},\r\n            { key:'project',value:{ type:project_type,path:filepath,dependencies:[] } }\r\n        ];\r\n        updatedValues = mappingDir ? updatedValues:updatedValues.concat({ key:\"appState\",value:A.DIR_OPEN });\r\n\r\n        //set provided  values for updated directory.\r\n        return this.setValues(updatedValues);\r\n    },\r\n\r\n    //update the project dependencies.\r\n    async updateProjectDependencies(dependencies)\r\n    {\r\n        let project;\r\n        try {\r\n            project = await this.getValue('project');\r\n        }\r\n        catch(e) {}\r\n\r\n        return this.setValue('project',{ ...project,dependencies });\r\n    },\r\n\r\n    /**functionality that takes in a function as an argument that is\r\n     * @param {_mutate}  -> function provided by user that changes directory in the way user wishes it to change.\r\n     * @returns Promise<Object> containing the updated directory or null.\r\n     */\r\n    async mutateCurrentDir({ _mutate }) \r\n    {\r\n        let currentDirectory = {};\r\n        try {\r\n            currentDirectory = await this.getValue(\"currentDirectory\");\r\n        }\r\n        catch(e) {\r\n            console.log(e);\r\n        }\r\n        //obtain updated value of the directory.\r\n        let updatedDirectory = _mutate(currentDirectory);\r\n        //if updatedDirectory is valid then update value of currentDirectory key.\r\n        return updatedDirectory ? this.setValue(\"currentDirectory\",updatedDirectory) : null;\r\n    },\r\n\r\n    /**\r\n     * gui functionality responsible for enabling graphical opening of folders in file directory\r\n     * through the change of state.\r\n     * \r\n     */\r\n    async toggleFolder(folderpath) \r\n    {\r\n        let paths = folderpath.split('/');\r\n        let currentDirectory = {};\r\n        try {\r\n            currentDirectory = await this.getValue('currentDirectory');\r\n        }\r\n        catch(e) {}\r\n        //make appropriate manipulations to the current directory.\r\n        currentDirectory = DirFunctions.changeDir(currentDirectory,paths,this._toggle);\r\n\r\n        return await this.setValue(\"currentDirectory\",currentDirectory);\r\n    },\r\n\r\n    //closeFile functionality closes file given by the current data.\r\n    //filename -> string value of the file being closed.\r\n    //filepath -> string value of the path to the file being closed.\r\n    //isCurrent -> boolean value of whether the file is the current file being displayed.\r\n    async closeFile({ filename }) \r\n    {\r\n        let openFiles = {};\r\n        try \r\n        {\r\n            openFiles = await this.getValue(\"openFiles\");\r\n        }\r\n        catch(e) {};\r\n        let updatedValues = [];\r\n        let oparray = Object.keys(openFiles);\r\n        let currentFile = {};\r\n        if (openFiles[filename].isCurrent) {\r\n            //then currentFile must be updated obtain the first file open and set that as \r\n            //the new currentFile.\r\n            //if openFile is the only open file we change state to directory.\r\n            switch(oparray.length) \r\n            {\r\n                case 1:\r\n                    //in this case we reset ui to directory display mode.\r\n                    let _mutate = dir => { return { ...dir,currentFile:null }; }\r\n                    try \r\n                    {\r\n                        //mutate current directory.\r\n                        await this.mutateCurrentDir({ _mutate })\r\n                    }\r\n                    catch(e) {}\r\n                    openFiles = {};\r\n                    //updated application state\r\n                    updatedValues = updatedValues.concat({ key:\"appState\",value:A.DIR_OPEN })\r\n                    break;\r\n\r\n                default:\r\n                    //if there is more than 1 file then we find new current file and\r\n                    //update values in db.\r\n                    let updatedFile = \"\";\r\n                    for (let file of oparray ) {\r\n                        if (file != filename) {  updatedFile = file;break; }\r\n                    }\r\n                    //delete closed file.\r\n                    delete openFiles[filename];\r\n                    //update value of new currentFile.\r\n                    //new current file values.\r\n                    currentFile = openFiles[updatedFile];\r\n                    updatedValues = updatedValues.concat({key:'currentFile',value:currentFile});\r\n                    openFiles[updatedFile] = { ...currentFile,isCurrent:true };\r\n                    break;\r\n            }\r\n        }\r\n        else /*if file is not current then we delet file.*/delete openFiles[filename];\r\n        //update keys.\r\n        try  {\r\n            await this.setValues(\r\n                [ { key:\"openFiles\",value:openFiles }].concat(updatedValues)\r\n            )\r\n        }\r\n        catch(e) {}\r\n        return currentFile;\r\n    },\r\n\r\n    async newNode({ nodename,nodepath,nodetype })\r\n    {\r\n        //add the new file to the current directory.\r\n        let currentDirectory = {};\r\n        let _newNode = {};\r\n        if (nodetype == 'file') {\r\n            let fileType  = path.extname(nodename),lang;\r\n            try {\r\n                lang = (await this.getValue('SUPPORTED_TYPES'))[fileType]\r\n            }\r\n            catch(e) {}\r\n            _newNode = {\r\n                path:nodepath,\r\n                isdir:false,\r\n                sourceCode:'',\r\n                fileType:lang,\r\n                open:false,\r\n                newlyCreated:true\r\n            }\r\n        }\r\n        else {\r\n            _newNode = {\r\n                name:nodename,\r\n                path:nodepath,\r\n                currentFile:null,\r\n                children:{},\r\n                numOfChildren:0,\r\n                isExpanded:false,\r\n                isdir:true\r\n            }       \r\n        }\r\n        let _change = (directory) => \r\n            {  \r\n                let children = directory.children;\r\n                children[nodename] = _newNode;\r\n                return { ...directory,children }  \r\n            }\r\n        try {\r\n            //obtain the value of the current directory.\r\n            currentDirectory = await this.getValue('currentDirectory');\r\n            //change directory add new file to directory whose path matches that given\r\n            currentDirectory = await DirFunctions.changeDir(currentDirectory,nodepath.split('/'),_change);\r\n            return this.setValue('currentDirectory',currentDirectory);\r\n        }\r\n        catch(e) { /* unable to mutate current directory. */console.log(' error has occured ',e); }\r\n    },\r\n\r\n    //does mutations to the 'openFiles' object in the database\r\n    //'actions' array contains key ,value pairs of filenames and updated values.\r\n    async mutateOpenFiles({ actions }) \r\n    {\r\n        let openFiles = {};\r\n        try {\r\n            openFiles = await this.getValue(\"openFiles\");\r\n        }\r\n        catch(e) { console.log(\" error obtained in mutateOpenFiles function \",e); }\r\n        //complete actions on openFiles object.\r\n        actions.map( ({ key,value }) => \r\n        {     \r\n            if (typeof value == \"function\") \r\n            {\r\n                openFiles[key] = value(openFiles);\r\n            }\r\n            else openFiles[key] = value; \r\n        })        \r\n        return this.setValue('openFiles',openFiles);\r\n    },\r\n\r\n    /**functionality responsible for opening and set a file as the current file being edited in the text editor\r\n    filepath -> string type path to source file \r\n    sourceCode -> string value which copy of the file's contents\r\n    isInDirectory -> boolean value referring to whether or not file is in current project directory open.\r\n    prevOpenFile -> string value. whether or not there was a file previously open*/\r\n    async openFile({ filepath,sourceCode,prevOpenFilePath,newlyCreated }) \r\n    {\r\n        let parts = filepath.split('/');\r\n        let openFilesActions = [];\r\n        //obtain the current filename for the directory.\r\n        let filename = parts[parts.length-1];\r\n        let currentFile = this.curFileFormat({ filename,sourceCode,filepath });\r\n        //set file in the list of currently open file.\r\n        openFilesActions.push(\r\n            { \r\n                key:filename,\r\n                value:(object) => {\r\n                    if (object[filename]) {\r\n                        currentFile.isSaved = object[filename].isSaved;\r\n                        return { ...object[filename],isCurrent:true }\r\n                    }\r\n                    return ({ ...currentFile,isCurrent:true })\r\n                }\r\n        });\r\n        //list of updated values which will be set in the database.\r\n        //if file has been previously opened.\r\n        if (prevOpenFilePath) {\r\n            let prevpath = prevOpenFilePath.split('/');\r\n            let prevfilename = prevpath[prevpath.length-1];\r\n            openFilesActions.push(\r\n                { \r\n                    key:prevfilename,\r\n                    value:obj => ({ ...obj[prevfilename],isCurrent:false })\r\n                });    \r\n        }\r\n        //update openFile object.\r\n        try {\r\n            if (newlyCreated) {\r\n                let currentDirectory = await this.getValue('currentDirectory');\r\n                function _change(directory) {\r\n                    let children = directory.children;\r\n                    children[filename] = { ...children[filename],newlyCreated:false }\r\n                    return { ...directory,children }\r\n                }\r\n                currentDirectory = DirFunctions.changeDir(currentDirectory,parts.filter(f => f != filename),_change);\r\n\r\n                //set current directory value to false.\r\n                await this.setValue('currentDirectory',currentDirectory);\r\n            }\r\n            //update previously opened file in currentDirectory\r\n            await this.mutateOpenFiles({ actions:openFilesActions });\r\n        }\r\n        catch(e) { console.log(\" error obtained \",e);throw e; }\r\n        //set values in database.\r\n        return await this.setValues([\r\n            { key:\"currentFile\",value:currentFile },\r\n            { key:\"appState\",value:A.FILE_OPEN },\r\n            { key:\"prevAction\",value:\"open\" },\r\n        ]);\r\n    },\r\n    \r\n    //functionality used to save the current file.\r\n    async saveFile() \r\n    {\r\n        let currentFile = {};\r\n        try \r\n        {\r\n            currentFile      = await this.getValue(\"currentFile\");\r\n        }\r\n        catch(e) {}\r\n        let filename = currentFile.name;\r\n        try \r\n        {//update openFiles value.\r\n            await this.mutateOpenFiles({ \r\n                actions:[ { \r\n                    key:filename,\r\n                    value:obj =>  { \r\n                        return { ...obj[filename],isSaved:true,sourceCode:currentFile.sourceCode }  \r\n                    }\r\n                }] \r\n            })\r\n        }\r\n        catch(e) {}\r\n        //set values of currentDirectory,currentFile and openFiles.\r\n        return await this.setValues([\r\n            { key:\"currentFile\",value:{ ...currentFile,isSaved:true } },\r\n            { key:\"prevAction\",value:\"save\" }\r\n        ]);\r\n    },\r\n\r\n    //case where file is being edited and therefore must be updated as not saved.\r\n    async editFile(sourceCode) {\r\n        let currentFile = await this.getValue(\"currentFile\");\r\n        let updatedFiles = [ \r\n            { key:\"currentFile\",value:{ ...currentFile,isSaved:false,sourceCode } },\r\n            { key:\"prevAction\",value:\"edit\" }\r\n        ]\r\n        //if the current file is currently said to be saved then we manipulate that.\r\n        //if (currentFile.isSaved) {\r\n        this.mutateOpenFiles({\r\n            actions:[ \r\n                { \r\n                    key:currentFile.name,\r\n                    value:obj => { return { ...obj[currentFile.name],isSaved:false,sourceCode } } \r\n                }]\r\n        })\r\n        //return updated values.\r\n        return await this.setValues(updatedFiles);\r\n    },\r\n\r\n    async closeCurrentDirectory() { return this.deleteDB(); }\r\n}\r\n\r\nwindow.AppState = Fonst;\r\nmodule.exports =  Fonst;"],"file":"db.js"}