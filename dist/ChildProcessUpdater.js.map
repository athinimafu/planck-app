{"version":3,"sources":["../src/ChildProcessUpdater.js"],"names":["ipcRenderer","require","E","_path","languages","ProcessGUI","init","saveFunc","AppState","language","options","interval","_lang","_time","_int","updateInterval","_saveFunc","_appState","_process_running","setLanguage","lang","monitorUpdate","setInterval","Date","now","updateCode","isProcessRenderering","sourceCode","path","session","currentSourceCode","dependencies","getDependencies","console","log","includes","send","UPDATE_GUI","extname","filepath","update_code","updateTime","stopMonitoring","clearInterval","module","exports"],"mappings":";;AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,OAAO,CAAC,UAAD,CAA/B;;AACA,MAAMC,CAAC,GAAiBD,OAAO,CAAC,UAAD,CAA/B;;AACA,MAAME,KAAK,GAAaF,OAAO,CAAC,MAAD,CAA/B;AACA;;;AACA,MAAMG,SAAS,GAAG;AACd,WAAQ,MADM;AACC,SAAM,YADP;AACoB,UAAO;AAD3B,CAAlB;AAGA,MAAMC,UAAU,GAAG;AACf;AACAC,EAAAA,IAAI,CAACC,QAAD,EAAUC,QAAV,EAAmBC,QAAQ,GAAC,EAA5B,EAA+BC,OAAO,GAAC;AAAEC,IAAAA,QAAQ,EAAC;AAAX,GAAvC,EAAyD;AACzD,SAAKC,KAAL,GAAaH,QAAb;AACA,SAAKI,KAAL,GAAa,CAAC,CAAd;AACA,SAAKC,IAAL,GAAaJ,OAAO,CAACC,QAArB;AACA,SAAKI,cAAL,GAAsB,IAAtB;AACA,SAAKC,SAAL,GAAiBT,QAAjB;AACA,SAAKU,SAAL,GAAiBT,QAAjB;AACA,SAAKU,gBAAL,GAAwB,KAAxB;AACH,GAVc;;AAaf;AACAC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAAE,SAAKR,KAAL,GAAaQ,IAAb;AAAoB,GAdzB;;AAgBf;AACAC,EAAAA,aAAa,GAAG;AACZ,SAAKH,gBAAL,GAAwB,IAAxB;AACA,SAAKH,cAAL,GAAsBO,WAAW,CAAC,MAAM;AACpC,UAAI,KAAKT,KAAL,IAAc,CAAlB,EAAqB;;AACrB,UAAIU,IAAI,CAACC,GAAL,KAAa,KAAKX,KAAlB,GAA0B,KAAKC,IAAnC,EAAyC;AACrC,aAAKW,UAAL,GADqC,CAErC;;AACA,aAAKZ,KAAL,GAAa,CAAC,CAAd;AACH;AACJ,KAPgC,EAO/B,KAAKC,IAP0B,CAAjC;AAQH,GA3Bc;;AA6BfY,EAAAA,oBAAoB,GAAG;AAAE,WAAO,KAAKR,gBAAZ;AAA8B,GA7BxC;;AA6B2C;;AAE1D;AACAO,EAAAA,UAAU,GAAG;AACT,QAAI;AAAEE,MAAAA,UAAF;AAAaC,MAAAA;AAAb,QAAsB,KAAKX,SAAL,CAAeY,OAAf,CAAuBC,iBAAjD;;AACA,QAAIC,YAAY,GAAG,KAAKd,SAAL,CAAee,eAAf,EAAnB,CAFS,CAGT;AACA;;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAqCH,YAArC,EAAkD,gBAAlD,EAAmEH,IAAnE;;AACA,QAAIG,YAAY,CAACI,QAAb,CAAsBP,IAAtB,CAAJ,EAAiC;AAC7BK,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAlC,MAAAA,WAAW,CAACoC,IAAZ,CAAiBlC,CAAC,CAACmC,UAAnB,EAA8B;AAAEV,QAAAA,UAAF;AAAaC,QAAAA,IAAb;AAAkBR,QAAAA,IAAI,EAAChB,SAAS,CAACD,KAAK,CAACmC,OAAN,CAAcV,IAAd,CAAD;AAAhC,OAA9B;AACH,KATQ,CAUT;;;AACA,SAAKZ,SAAL,CAAe;AAACuB,MAAAA,QAAQ,EAACX,IAAV;AAAeD,MAAAA,UAAf;AAA0Ba,MAAAA,WAAW,EAAC;AAAtC,KAAf;AACH,GA5Cc;;AA8Cf;AACAC,EAAAA,UAAU,GAAG;AAAE,SAAK5B,KAAL,GAAaU,IAAI,CAACC,GAAL,EAAb;AAAyB,GA/CzB;;AAiDf;AACAkB,EAAAA,cAAc,GACd;AACIC,IAAAA,aAAa,CAAC,KAAK5B,cAAN,CAAb;AAAmC,SAAKF,KAAL,GAAa,CAAC,CAAd;AACnC,SAAKK,gBAAL,GAAwB,KAAxB;AACH;;AAtDc,CAAnB;AAwDA0B,MAAM,CAACC,OAAP,GAAiBxC,UAAjB","sourcesContent":["const { ipcRenderer } = require(\"electron\");\nconst E               = require(\"./events\");\nconst _path           = require(\"path\");\n/** functionality moniters and handles code updates to the child gui process. */\nconst languages = {\n    '.html':'html','.js':\"javascript\",\".css\":\"css\"\n}\nconst ProcessGUI = {\n    /** manages the updating of the renderer gui. */\n    init(saveFunc,AppState,language='',options={ interval:200 }) {\n        this._lang = language;\n        this._time = -1;\n        this._int  = options.interval;\n        this.updateInterval = null;\n        this._saveFunc = saveFunc;\n        this._appState = AppState;\n        this._process_running = false;\n    },\n\n    \n    /**set language currently in use in the project. */\n    setLanguage(lang) { this._lang = lang; },\n\n    /** functionality which moniters changes to the gui then sends appropriate updates to main process. */\n    monitorUpdate() {\n        this._process_running = true;\n        this.updateInterval = setInterval(() => {\n            if (this._time <= 0) return;\n            if (Date.now() - this._time > this._int) {\n                this.updateCode();\n                //reset time to -1.\n                this._time = -1;\n            }\n        },this._int);       \n    },\n\n    isProcessRenderering() { return this._process_running },  //if process is running or not.\n\n    /* functionality which updates code. */\n    updateCode() { \n        let { sourceCode,path } = this._appState.session.currentSourceCode;\n        let dependencies = this._appState.getDependencies();\n        //update gui.\n        //console.log(\" updating code \");\n        console.log(\" current dependencies \",dependencies,\" current path \",path);\n        if (dependencies.includes(path)) {\n            console.log(\" gui being updated.. \");\n            ipcRenderer.send(E.UPDATE_GUI,{ sourceCode,path,lang:languages[_path.extname(path)] });\n        }\n        //save the file to the file system.\n        this._saveFunc({filepath:path,sourceCode,update_code:false});\n    },\n\n    /** functionality for updating time. */\n    updateTime() { this._time = Date.now() },\n\n    /* stop gui monitering process --> this likely means gui process has been killed */\n    stopMonitoring() \n    { \n        clearInterval(this.updateInterval);this._time = -1; \n        this._process_running = false;\n    }\n}\nmodule.exports = ProcessGUI;"],"file":"ChildProcessUpdater.js"}