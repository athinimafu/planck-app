{"version":3,"sources":["../src/renderer.js"],"names":["ipcRenderer","require","GUIUpdater","ApplicationState","E","_path","windowsStore","$funcs","functionality","window","on","PROJECT_DEP","e","dep","console","log","updateProjectDependencies","NEW_FILE","canceled","filePaths","newNodeCreationPrompt","NEW_FOLDER","DIR_PRESENT","currentDirectory","project","getDBValues","openFiles","currentFileDetermination","path","resolve","name","openDirectory","type","getOpenFilesData","send","PROJECT_TYPE","SAVE_FILE","fileObject","fetchFile","sourceCode","update_code","fileType","saveFiletoSys","filepath","lang","init","update_file","isProcessRenderering","updateCode","saveFile","projecttype","invoke","OPEN_DIR_PROMPT","then","data","openFile","prevOpenFilePath","newlyCreated","code","OPEN_FILE","showFile","object","runProjectRendering","monitorUpdate","updateGUIState","key","value","RUN_GUI","stopRenderering","stopMonitoring","STOP_GUI","editFile","language","isRunning","updateTime","createNode","nodename","nodepath","session","newNode","module","exports"],"mappings":"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","sourcesContent":["const { ipcRenderer } = require(\"electron\")\nconst GUIUpdater = require(\"./ChildProcessUpdater\");\nconst ApplicationState = require(\"./db\");\nconst E = require(\"./events\");\nconst _path = require('path');\nconst { windowsStore } = require(\"process\");\n\n\n/** in the case of an application startup we set application ui \n * according to one of 3 possible cases:\n *  -\"FIRST TIME\":\n *    ---if it's the first time we on hello world page and prompt user to open a file.\n *  -\"NO OPEN WORKING DIRECTORY\":\n *    --- in the case where there is no open working directory\n *    --- we prompt the user to open a work directory.\n *  -\"OPEN WORKING DIRECTORY\":  \n *    --- in the case there is a working directory we open code that was previously being opened.\n * */\n/** contains application state along with functionality  */\nlet $funcs = ApplicationState.functionality;\nwindow.ApplicationState = ApplicationState;\n/** project dependencies are recieved from the main process. */\nipcRenderer.on(E.PROJECT_DEP,(e,dep) => { \n    console.log(\" dependencies init \",dep);\n    ApplicationState.updateProjectDependencies(dep) \n})\n\n/** in the event that a new file is being created. */\nipcRenderer.on(E.NEW_FILE,(e,{canceled,filePaths}) => {\n    if (canceled) { return; }\n    ApplicationState.newNodeCreationPrompt(filePaths[0],'file');\n})\n\n/** in the event that a new folder is being created. */\nipcRenderer.on(E.NEW_FOLDER,(e,{ canceled,filePaths }) => {\n    if (canceled) { return;}\n    ApplicationState.newNodeCreationPrompt(filePaths[0],'directory');\n})\n\n/** in the event where knowledge of whether directory is already open is needed.*/\nipcRenderer.on(E.DIR_PRESENT,async (e) => {\n    let currentDirectory,project;\n    try {\n        //current directory.\n        currentDirectory = await ApplicationState.getDBValues('currentDirectory');\n        project          = await ApplicationState.getDBValues('project');\n        openFiles        = await ApplicationState.getDBValues('openFiles');\n    }\n    catch(e) {}\n    //also determine whether a currentFile already exists.\n    ApplicationState.currentFileDetermination();\n    console.log(\" currentDirectory \",currentDirectory);\n\n    if (currentDirectory.path) {\n        currentDirectory = _path.resolve(currentDirectory.path,currentDirectory.name);\n        ApplicationState.openDirectory(currentDirectory,project.type,true);\n        ApplicationState.getOpenFilesData();;\n    }\n    ipcRenderer.send(E.DIR_PRESENT,{currentDirectory,PROJECT_TYPE:project.type });\n})\n\n/**save current file being worked on. */\nipcRenderer.on(E.SAVE_FILE,async () => {\n    let fileObject;\n    try {\n        fileObject = await ApplicationState.fetchFile();\n    }\n    catch(e) {\n        console.log(\" unable to fetch file from front-end db. \",e);\n        return;\n    }\n    let { path,sourceCode,update_code,fileType } = fileObject;\n    //save file to sys call.\n    return saveFiletoSys({ filepath:path,sourceCode,update_code,lang:fileType });\n})\n\n//gui updater.\nGUIUpdater.init(saveFiletoSys,ApplicationState);\n\nfunction saveFiletoSys({filepath,sourceCode,update_code,lang }) {\n    //send sourcecode and filepath to main process to be saved to the filesystem.\n    \n    ipcRenderer.send(E.SAVE_FILE,{ filepath,sourceCode,lang,update_file:update_code && !GUIUpdater.isProcessRenderering() });\n    //update application state.\n    if (update_code && GUIUpdater.isProcessRenderering() ) /** update gui's code. */\n        GUIUpdater.updateCode();\n    //save file.\n    $funcs.saveFile();\n}\n\nconst functionality = {\n    openDirectory(projecttype) \n    {\n        //initialize gui process updater.\n        return ipcRenderer.invoke(E.OPEN_DIR_PROMPT,projecttype).then(data => {\n            let { canceled,filePaths }  = data;\n            //if user canceled open directory prompt return.\n            if (canceled == true) return;\n            //call ApplicationState.\n            ApplicationState.openDirectory(filePaths[0],projecttype,false);\n        });\n    },\n    ...$funcs,\n    async openFile(filepath,prevOpenFilePath,newlyCreated=false) {\n        console.log(' filepath ',filepath);\n        let code = await ipcRenderer.invoke(E.OPEN_FILE,{ filepath,newlyCreated });\n        //once source code is found.\n        return $funcs.openFile({ filepath,sourceCode:code,prevOpenFilePath,newlyCreated });\n    },\n    //showFile changes current file to from current file to file given to function.\n    //showFile takes in object {filepath:string,sourceCode:string,prevOpenFilePath:string}\n    async showFile(object) { return $funcs.openFile(object); }, \n    saveFiletoSys,\n    //functionality for when a person wishes to render the code's gui.\n    runProjectRendering({filepath,projecttype,sourceCode }) \n    {\n        //tell gui process updater that gui has been renderered.\n        //gui process handler will begin monitering gui process.\n        GUIUpdater.monitorUpdate();\n        ApplicationState.updateGUIState([ { key:\"isRunning\",value:true}, ]);\n        switch(projecttype) {\n            case 'html':\n                ApplicationState.updateProjectDependencies([ filepath ]);\n                break;\n        }\n        return ipcRenderer.send(E.RUN_GUI,{ filepath,project:projecttype,sourceCode });\n    },\n    stopRenderering() \n    {\n        //kill gui monitoring process.\n        GUIUpdater.stopMonitoring();\n        //stop the current rendering process which is running.\n        ApplicationState.updateGUIState(\n            [ { key:\"isRunning\",value:false } ]\n        );\n        //send message to main process to stop child process from running.\n        return ipcRenderer.send(E.STOP_GUI);\n    },\n    //functionality to edit gui.\n    editFile({ sourceCode,language,isRunning }) \n    {\n        if (isRunning) /* if gui process is running we update it. */\n            {GUIUpdater.updateTime(); console.log(\" running code \"); }\n        return $funcs.editFile({ sourceCode,isRunning,language });\n    },\n    //functionality for creating a new file.\n    createNode(nodename,type) \n    {\n        let { nodepath } = ApplicationState.session.newNode;\n        //send absolute path of file to main process.\n        console.log(\" filepath \",nodepath);\n        switch(type) {\n        case 'file': \n            ipcRenderer.send(E.NEW_FILE,_path.resolve(nodepath,nodename));\n            break;\n        case 'directory': \n            ipcRenderer.send(E.NEW_FOLDER,_path.resolve(nodepath,nodename));\n            break;\n        }\n        return $funcs.createNode(nodename);\n    }\n}\nmodule.exports = {\n    /** @param{$self} React.Component instance ties application state and functionality to Application ui. */\n    ...ApplicationState,\n    /** functionality prompts user to select a working directory. */\n    functionality\n    \n}"],"file":"renderer.js"}