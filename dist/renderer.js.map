{"version":3,"sources":["../src/renderer.js"],"names":["ipcRenderer","require","GUIUpdater","ApplicationState","E","_path","$funcs","functionality","window","on","PROJECT_DEP","e","dep","console","log","updateProjectDependencies","NEW_FILE","canceled","filePaths","newNodeCreationPrompt","NEW_FOLDER","OPEN_FILES_PRESENT","openFiles","updateOpenFiles","PROCESS_STOPPED","updateGUIState","key","value","DIR_PRESENT","currentDirectory","project","getDBValues","Object","keys","length","send","currentFileDetermination","path","resolve","name","openDirectory","type","getOpenFilesData","PROJECT_TYPE","SAVE_FILE","fileObject","fetchFile","sourceCode","update_code","fileType","saveFiletoSys","filepath","lang","init","update_file","isProcessRenderering","updateCode","saveFile","projecttype","invoke","OPEN_DIR_PROMPT","then","data","openFile","prevOpenFilePath","newlyCreated","code","OPEN_FILE","showFile","object","runProjectRendering","monitorUpdate","RUN_GUI","stopRenderering","stopMonitoring","STOP_GUI","editFile","language","isRunning","updateTime","createNode","nodename","nodepath","session","newNode","module","exports"],"mappings":"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","sourcesContent":["const { ipcRenderer } = require(\"electron\")\nconst GUIUpdater = require(\"./ChildProcessUpdater\");\nconst ApplicationState = require(\"./db\");\nconst E = require(\"./events\");\nconst _path = require('path');\n\n/** in the case of an application startup we set application ui \n * according to one of 3 possible cases:\n *  -\"FIRST TIME\":\n *    ---if it's the first time we on hello world page and prompt user to open a file.\n *  -\"NO OPEN WORKING DIRECTORY\":\n *    --- in the case where there is no open working directory\n *    --- we prompt the user to open a work directory.\n *  -\"OPEN WORKING DIRECTORY\":  \n *    --- in the case there is a working directory we open code that was previously being opened.\n * */\n/** contains application state along with functionality  */\nlet $funcs = ApplicationState.functionality;\nwindow.ApplicationState = ApplicationState;\n/** project dependencies are recieved from the main process. */\nipcRenderer.on(E.PROJECT_DEP,(e,dep) => { \n    console.log(\" dependencies init \",dep);\n    ApplicationState.updateProjectDependencies(dep) \n})\n\n/** in the event that a new file is being created. */\nipcRenderer.on(E.NEW_FILE,(e,{canceled,filePaths}) => {\n    if (canceled) { return; }\n    ApplicationState.newNodeCreationPrompt(filePaths[0],'file');\n})\n\n/** in the event that a new folder is being created. */\nipcRenderer.on(E.NEW_FOLDER,(e,{ canceled,filePaths }) => {\n    if (canceled) { return;}\n    ApplicationState.newNodeCreationPrompt(filePaths[0],'directory');\n})\n\nipcRenderer.on(E.OPEN_FILES_PRESENT,(e,openFiles) => {\n    //update all the open files.\n    ApplicationState.updateOpenFiles(openFiles);\n})\n\nipcRenderer.on(E.PROCESS_STOPPED, e => {\n    ApplicationState.updateGUIState([ { key:\"isRunning\",value:false } ])   //set the gui state flag to not running\n})\n\n/** in the event where knowledge of whether directory is already open is needed.*/\nipcRenderer.on(E.DIR_PRESENT,async (e) => {\n    let currentDirectory,project,openFiles;\n    try {\n        //current directory.\n        currentDirectory = (await ApplicationState.getDBValues('currentDirectory')) || {};\n        project          = (await ApplicationState.getDBValues('project')) || {};\n        openFiles        = (await ApplicationState.getDBValues('openFiles')) || {};\n    }\n    catch(e) {}\n    if ( Object.keys(openFiles).length > 0 ) {\n        ipcRenderer.send(E.OPEN_FILES_PRESENT,openFiles);\n    }\n    //also determine whether a currentFile already exists.\n    ApplicationState.currentFileDetermination();\n\n    if (currentDirectory.path) {\n        currentDirectory = _path.resolve(currentDirectory.path,currentDirectory.name);\n        ApplicationState.openDirectory(currentDirectory,project.type,true);\n        ApplicationState.getOpenFilesData();;\n        ipcRenderer.send(E.DIR_PRESENT,{currentDirectory,PROJECT_TYPE:project.type });\n    }\n})\n\n/**save current file being worked on. */\nipcRenderer.on(E.SAVE_FILE,async () => {\n    let fileObject;\n    try {\n        fileObject = await ApplicationState.fetchFile();\n    }\n    catch(e) {\n        console.log(\" unable to fetch file from front-end db. \",e);\n        return;\n    }\n    let { path,sourceCode,update_code,fileType } = fileObject;\n    //save file to sys call.\n    return saveFiletoSys({ filepath:path,sourceCode,update_code,lang:fileType });\n})\n\n//gui updater.\nGUIUpdater.init(saveFiletoSys,ApplicationState);\n\nfunction saveFiletoSys({filepath,sourceCode,update_code,lang }) {\n    //send sourcecode and filepath to main process to be saved to the filesystem.\n    \n    ipcRenderer.send(E.SAVE_FILE,{ filepath,sourceCode,lang,update_file:update_code && !GUIUpdater.isProcessRenderering() });\n    //update application state.\n    if (update_code && GUIUpdater.isProcessRenderering() ) /** update gui's code. */\n        GUIUpdater.updateCode();\n    //save file.\n    $funcs.saveFile();\n}\n\nconst functionality = {\n    openDirectory(projecttype) \n    {\n        //initialize gui process updater.\n        return ipcRenderer.invoke(E.OPEN_DIR_PROMPT,projecttype).then(data => {\n            let { canceled,filePaths }  = data;\n            //if user canceled open directory prompt return.\n            if (canceled == true) return;\n            //call ApplicationState.\n            console.log(\" opening directory \",filePaths[0]);\n            ApplicationState.openDirectory(filePaths[0],projecttype,false);\n        });\n    },\n    ...$funcs,\n    async openFile(filepath,prevOpenFilePath,newlyCreated=false) {\n        console.log(' filepath ',filepath);\n        let code = await ipcRenderer.invoke(E.OPEN_FILE,{ filepath,newlyCreated });\n        //once source code is found.\n        return $funcs.openFile({ filepath,sourceCode:code,prevOpenFilePath,newlyCreated });\n    },\n    //showFile changes current file to from current file to file given to function.\n    //showFile takes in object {filepath:string,sourceCode:string,prevOpenFilePath:string}\n    async showFile(object) { return $funcs.openFile(object); }, \n    saveFiletoSys,\n    //functionality for when a person wishes to render the code's gui.\n    runProjectRendering({filepath,projecttype,sourceCode }) \n    {\n        //tell gui process updater that gui has been renderered.\n        //gui process handler will begin monitering gui process.\n        GUIUpdater.monitorUpdate();\n        ApplicationState.updateGUIState([ { key:\"isRunning\",value:true}, ]);\n        switch(projecttype) {\n            case 'html':\n                ApplicationState.updateProjectDependencies([ filepath ]);\n                break;\n        }\n        return ipcRenderer.send(E.RUN_GUI,{ filepath,project:projecttype,sourceCode });\n    },\n    stopRenderering() \n    {\n        //kill gui monitoring process.\n        GUIUpdater.stopMonitoring();\n        //stop the current rendering process which is running.\n        ApplicationState.updateGUIState(\n            [ { key:\"isRunning\",value:false } ]\n        );\n        //send message to main process to stop child process from running.\n        return ipcRenderer.send(E.STOP_GUI);\n    },\n    //functionality to edit gui.\n    editFile({ sourceCode,language,isRunning }) \n    {\n        console.log(\" file being edited \");\n        if (isRunning) /* if gui process is running we update it. */\n            {GUIUpdater.updateTime(); console.log(\" running code \"); }\n        return $funcs.editFile({ sourceCode,isRunning,language });\n    },\n    //functionality for creating a new file.\n    createNode(nodename,type) \n    {\n        let { nodepath } = ApplicationState.session.newNode;\n        //send absolute path of file to main process.\n        console.log(\" filepath \",nodepath);\n        switch(type) {\n        case 'file': \n            ipcRenderer.send(E.NEW_FILE,_path.resolve(nodepath,nodename));\n            break;\n        case 'directory': \n            ipcRenderer.send(E.NEW_FOLDER,_path.resolve(nodepath,nodename));\n            break;\n        }\n        return $funcs.createNode(nodename);\n    }\n}\nmodule.exports = {\n    /** @param{$self} React.Component instance ties application state and functionality to Application ui. */\n    ...ApplicationState,\n    /** functionality prompts user to select a working directory. */\n    functionality\n    \n}"],"file":"renderer.js"}